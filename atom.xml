<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lesenelir.github.io/</id>
    <title>Lesenelir&apos;s Blog</title>
    <updated>2021-12-03T05:02:57.518Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lesenelir.github.io/"/>
    <link rel="self" href="https://lesenelir.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://lesenelir.github.io/images/avatar.png</logo>
    <icon>https://lesenelir.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Lesenelir&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[Binary Search Tree ]]></title>
        <id>https://lesenelir.github.io/post/binary-search-tree/</id>
        <link href="https://lesenelir.github.io/post/binary-search-tree/">
        </link>
        <updated>2020-07-12T02:10:07.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1二叉搜索树">1.二叉搜索树</h1>
<h3 id="概念">概念</h3>
<p>二叉搜索树：左子树结点值 &lt; 父结点值 &lt; 右子树结点值</p>
<blockquote>
<p>对于二叉搜索树来说，中序遍历能得到一个升序排列。</p>
</blockquote>
<h1 id="2二叉搜索树-插入">2.二叉搜索树---插入</h1>
<h3 id="二叉搜索树插入问题描述"><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_8_A">二叉搜索树插入问题描述</a></h3>
<h3 id="代码实现">代码实现</h3>
<pre><code class="language-C++">#include &lt;cstdio&gt;
#include &lt;iostream&gt;
using namespace std;

struct Node {
	int key;
	Node *right, *left, *parent;	
};

Node *root, *NIL;

void insert(int k) {
	Node *y = NIL; // 前一个结点
	Node *x = root; // 当前结点
	Node *z; // 插入结点
	
	z = (Node *)malloc(sizeof(Node)); // 待插入结点一定是叶子结点
	z-&gt;key = k;
	z-&gt;left = NIL;
	z-&gt;right = NIL;
	
	while (x != NIL) {
		y = x;
		if (z-&gt;key &lt; x-&gt;key) {
			x = x-&gt;left;
		} else {
			x = x-&gt;right;
		}
	}
	z-&gt;parent = y;
	
	if (y == NIL) { //插入前的二叉树为空，z即为根结点
		root = z; 
	} else {
		if (z-&gt; key &lt; y-&gt;key) {
			y-&gt;left = z;
		} else {
			y-&gt;right = z;
		}
	}	
}

void inOrder(Node *u) {
	if (u == NIL) return;
	inOrder(u-&gt;left);
	printf(&quot; %d&quot;, u-&gt;key);
	inOrder(u-&gt;right);
}

void preOrder(Node *u) {
	if (u == NIL) return;
	printf(&quot; %d&quot;, u-&gt;key);
	preOrder(u-&gt;left);
	preOrder(u-&gt;right);
}


int main() {
	int n;
	while (scanf(&quot;%d&quot;, &amp;n) != EOF) {
		int x;
		string com;		
		for (int i = 0; i &lt; n; i++) {
			cin &gt;&gt; com;
			if (com == &quot;insert&quot;) {
				scanf(&quot;%d&quot;, &amp;x);
				insert(x);
			} else if (com == &quot;print&quot;) {
				inOrder(root);
				printf(&quot;\n&quot;);
				preOrder(root);
				printf(&quot;\n&quot;);
			}
		}		
	}
	return 0;
}
</code></pre>
<h3 id="算法解析">算法解析</h3>
<p>insert()函数以根结点为起点寻找结点z该插入的位置。<br>
当前结点x<br>
前一个结点y<br>
插入结点z</p>
<blockquote>
<p>二叉搜索树插入的结点一定是叶子结点。<br>
算法复杂度是O(logn)</p>
</blockquote>
<h1 id="3二叉搜索树-搜索">3.二叉搜索树---搜索</h1>
<h3 id="二叉搜索树搜索问题描述"><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_8_B">二叉搜索树搜索问题描述</a></h3>
<h3 id="代码实现-2">代码实现</h3>
<pre><code class="language-C++">#include &lt;cstdio&gt;
#include &lt;iostream&gt;
using namespace std;

struct Node {
	int key;
	Node *left, *right, *parent;
};

Node *root, *NIL;

// 搜索算法
Node *find_key(Node *x, int k) {
	while ( x != NIL &amp;&amp; k != x-&gt;key) {
		if (k &lt; x-&gt;key) x = x-&gt;left;
		else x = x-&gt;right;
	}
	return x;
}

void insert(int k) {
	Node *y = NIL; // 前一个结点
	Node *x = root; // 当前结点
	Node *z; // 插入结点
	
	z = (Node *)malloc(sizeof(Node)); // 待插入结点一定是叶子结点
	z-&gt;key = k;
	z-&gt;left = NIL;
	z-&gt;right = NIL;
	
	while (x != NIL) {
		y = x;
		if (z-&gt;key &lt; x-&gt;key) {
			x = x-&gt;left;
		} else {
			x = x-&gt;right;
		}
	}
	z-&gt;parent = y;
	
	if (y == NIL) { //插入前的二叉树为空，z即为根结点
		root = z; 
	} else {
		if (z-&gt; key &lt; y-&gt;key) {
			y-&gt;left = z;
		} else {
			y-&gt;right = z;
		}
	}	
}

void inOrder(Node *u) {
	if (u == NIL) return;
	inOrder(u-&gt;left);
	printf(&quot; %d&quot;, u-&gt;key);
	inOrder(u-&gt;right);
}

void preOrder(Node *u) {
	if (u == NIL) return;
	printf(&quot; %d&quot;, u-&gt;key);
	preOrder(u-&gt;left);
	preOrder(u-&gt;right);
}

int main() {
	int n;
	while (scanf(&quot;%d&quot;, &amp;n) != EOF) {
		int x;
		string com;
		for (int i = 0; i &lt; n; i++) {
			cin &gt;&gt; com;
			if (com == &quot;find&quot;) {
				scanf(&quot;%d&quot;, &amp;x);
				Node *temp = find_key(root, x);
				if (temp != NIL) printf(&quot;YES\n&quot;);
				else printf(&quot;NO\n&quot;);
			} else if (com == &quot;insert&quot;) {
				scanf(&quot;%d&quot;, &amp;x);
				insert(x);
			} else if (com == &quot;print&quot;) {
				inOrder(root);
				printf(&quot;\n&quot;);
				preOrder(root);
				printf(&quot;\n&quot;);
			}
		}
	}
	return 0;
}
</code></pre>
<h3 id="算法解析-2">算法解析</h3>
<p>Node *find_key(Node *x, int k) 以根结点为起点调用函数，从根结点向叶结点搜索。<br>
给定键值小于当前结点x的键值，则左移；给定键值大于当前结点x的键值，则右移。<br>
键值不存在则返回NIL。</p>
<blockquote>
<p>假设树高为h，则find算法复杂度为O(h)</p>
</blockquote>
<h1 id="4二叉搜索树-删除">4.二叉搜索树---删除</h1>
<h3 id="二叉搜索树搜索问题描述-2"><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_8_C">二叉搜索树搜索问题描述</a></h3>
<h3 id="代码实现-3">代码实现</h3>
<pre><code class="language-C++">// 树的最小值
Node *treeMinimum(Node * x) {
    while (x-&gt;left != NIL) {
        x = x-&gt;left;
    }
    return x;
}

// case 3 ,搜索后一个结点
Node *treeSuccessor(Node *x) {
    if (x-&gt;right != NIL)
        return treeMinimum(x-&gt;right);

    Node *y = x-&gt;parent;
    while (y != NIL &amp;&amp; x == y-&gt;right) {
        x = y;
        x = y-&gt;parent;
    }
    return y;
}

void treeDelete(Node * z) {
    Node *y, *x;  // 要删除的对象和y的子结点

    // 确定要删除的结点
    if (z-&gt;left == NIL || z-&gt;right == NIL) y = z;
    else {
        y = treeSuccessor(z);
    }

    // 确定y的子结点x
    if (y-&gt;left != NIL) x = y-&gt;left;
    else x = y-&gt;right;

    // 让子结点链接父结点
    if (x != NIL) x-&gt;parent = y-&gt;parent;

    // 让父结点链接子结点
    if (y-&gt;parent == NIL) root = x;
    else {
        if (y == y-&gt;parent-&gt;left)
            y-&gt;parent-&gt;left = x;
        else
            y-&gt;parent-&gt;right = x;
    }

    // case 3
    if (y != z) z-&gt;key = y-&gt;key;
    delete y;
}
</code></pre>
<h3 id="算法解析-3">算法解析</h3>
<p>删除功能需要考虑三种情况，假设删除的结点为x<br>
（1）x没有子结点，则将x结点删除即可。<br>
（2）如果x只有左子树或者只有右子树，则将子树拼接上父结点即可.<br>
（3）如果同时具有左右子树。可以将结点x的左子树的最大值（也就是左子树一直往右孩子节点遍历即是最大值）或者右子树的最小值（也就是右子树一直往左孩子节点遍历即是最小值）替换x，然后拼接左子树或者右子树</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tree Algorithm]]></title>
        <id>https://lesenelir.github.io/post/tree-algorithm/</id>
        <link href="https://lesenelir.github.io/post/tree-algorithm/">
        </link>
        <updated>2020-07-11T03:30:15.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1有根树的表达">1.有根树的表达</h1>
<h3 id="概念">概念</h3>
<p>结点深度：根结点到结点x的路径长度称为结点x的深度。<br>
结点高度：结点x到叶结点最大路径长度称为结点x的高。<br>
树高：从根结点到叶子结点最大路径长度。<br>
结点的度：结点x的子结点的数目。</p>
<h3 id="有根树表达问题描述"><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_7_A">有根树表达问题描述</a></h3>
<h3 id="代码实现">代码实现</h3>
<pre><code class="language-C++">#include &lt;cstdio&gt;
#include &lt;iostream&gt;
using namespace std;

const int maxn = 100001;
const int NIL = -1;


struct Node {
	int p, l, r;
} T[maxn];

int n;
int D[maxn]; // 深度数组

void print(int u) {
	printf(&quot;node %d: parent = %d, depth = %d, &quot;, u, T[u].p, D[u]);
	
	if (T[u].p == NIL) printf(&quot;root, &quot;);
	else if (T[u].l == NIL) printf(&quot;leaf, &quot;); // 不存在最左侧的结点
	else printf(&quot;internal node, &quot;);
	
	printf(&quot;[&quot;);
	for (int i = 0, c = T[u].l; c != NIL; i++, c = T[c].r) {
		if (i) printf(&quot;, &quot;);
		printf(&quot;%d&quot;, c);
	}
	printf(&quot;]\n&quot;);
}

// 递归求深度，保存在D数组中
int setDepth(int u, int p) {
	D[u] = p;
	if (T[u].r != NIL) setDepth(T[u].r, p); // 右侧兄弟设置相同深度
	if (T[u].l != NIL) setDepth(T[u].l, p + 1); // 左侧子结点深度设置为自己深度+1
}

int main() {
	int n;
	while (scanf(&quot;%d&quot;, &amp;n) != EOF) {
		for (int i = 0; i &lt; n; i++) {
			T[i].p = T[i].l = T[i].r = NIL;
		}
		int v, d, c, l, r;
		for (int i = 0; i &lt; n; i++) {
			scanf(&quot;%d %d&quot;, &amp;v, &amp;d);
			for (int j = 0; j &lt; d; j++) {
				scanf(&quot;%d&quot;, &amp;c);
				if (j == 0) T[v].l = c; // j==0叶子结点设置它的最左结点
				else T[l].r = c;
				l = c;
				T[c].p = v;
			}
		}
		for (int i = 0; i &lt; n; i++) {
			if (T[i].p == NIL) r = i;
		}
		
		setDepth(r, 0);
		for (int i = 0; i &lt; n; i++) {
			print(i);
		}
	}
	return 0;
}
</code></pre>
<h3 id="算法解析">算法解析</h3>
<ul>
<li>存储有根树 -----&gt; 左子右孩子表示法<br>
结点u的父节点<br>
结点u最左侧的子结点<br>
结点u右侧紧邻的兄弟结点<br>
此时，不存在u.l的就是叶子结点</li>
</ul>
<blockquote>
<p>假设树高为h，则从各结点出发求深度（寻找父结点）算法复杂度是O(n)，求所有结点的深度算法复杂度是O(nh)</p>
</blockquote>
<h1 id="2二叉树的表达">2.二叉树的表达</h1>
<h3 id="概念-2">概念</h3>
<p>二叉树所有结点的度（结点子结点的个数）最多2，且二叉树严格区分左右子结点。</p>
<h3 id="二叉树表达问题描述"><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_7_B">二叉树表达问题描述</a></h3>
<h3 id="代码实现-2">代码实现</h3>
<pre><code class="language-C++">#include &lt;cstdio&gt;
#include &lt;iostream&gt;
using namespace std;

const int maxn = 100001;
const int NIL = -1;

struct Node {
	int parent, left, right;
} T[maxn];

int n, D[maxn], H[maxn]; // 深度数组，高度数组

void setDepth(int u, int d) {
	if (u == NIL) return;
	D[u] = d;
	setDepth(T[u].left, d + 1);
	setDepth(T[u].right, d + 1);
}

int setHeight(int u) {
	int h1 = 0, h2 = 0;
	if (T[u].left != NIL) h1 = setHeight(T[u].left) + 1;
	if (T[u].right != NIL) h2 = setHeight(T[u].right) + 1;
	return H[u] = (h1 &gt; h2 ? h1 : h2);
}

// 返回结点u的兄弟结点
int getSibling(int u) {
	if (T[u].parent == NIL) return NIL;
	if (T[T[u].parent].left != u &amp;&amp; T[T[u].parent].left != NIL) 
		return T[T[u].parent].left;
	if (T[T[u].parent].right != u &amp;&amp; T[T[u].parent].right != NIL) 
		return T[T[u].parent].right;
	return NIL;
}


void print(int u) {
	printf(&quot;node %d: &quot;, u);
	printf(&quot;parent = %d, &quot;, T[u].parent);
	printf(&quot;sibling = %d, &quot;, getSibling(u));
	int deg = 0; // 度数
	if (T[u].left != NIL) deg++;
	if (T[u].right != NIL) deg++;
	printf(&quot;degree = %d, &quot;, deg);
	printf(&quot;depth = %d, &quot;, D[u]);
	printf(&quot;height = %d, &quot;, H[u]);
	
	if (T[u].parent == NIL) {
		printf(&quot;root\n&quot;);
	} else if (T[u].left == NIL &amp;&amp; T[u].right == NIL) {
		printf(&quot;leaf\n&quot;);
	} else {
		printf(&quot;internal node\n&quot;);
	}
}


int main() {
	while (scanf(&quot;%d&quot;, &amp;n) != EOF) {
		for (int i = 0; i &lt; n; i++) T[i].parent = NIL;
		
		int v, l, r, root = 0;
		for (int i = 0; i &lt; n; i++) {
			scanf(&quot;%d %d %d&quot;, &amp;v, &amp;l, &amp;r);
			T[v].left = l;
			T[v].right = r;
			if (l != NIL) T[l].parent = v;
			if (r != NIL) T[r].parent = v;
		}
		
		for (int i = 0; i &lt; n; i++) {
			if (T[i].parent == NIL) root = i;
		}	
		
		setDepth(root, 0);
		setHeight(root);
		
		for (int i = 0; i &lt; n; i++) {
			print(i);
		}
		
	}
	return 0;
}
</code></pre>
<h3 id="算法解析-2">算法解析</h3>
<p>计算结点高度（往下求最长路径），只需要计算出“左子结点高 + 1” 和 “右子结点高 + 1”，然后取最大值即可。</p>
<blockquote>
<p>求结点高度的算法复杂度是O(n)</p>
</blockquote>
<h1 id="3树的遍历">3.树的遍历</h1>
<h3 id="概念-3">概念</h3>
<ul>
<li>前序遍历：根结点-&gt;左子树-&gt;右子树</li>
<li>中序遍历：左子树-&gt;根结点-&gt;右子树</li>
<li>后序遍历：左子树-&gt;右子树-&gt;根结点</li>
</ul>
<h3 id="树的遍历问题描述"><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_7_B">树的遍历问题描述</a></h3>
<h3 id="代码实现-3">代码实现</h3>
<pre><code class="language-C++">#include &lt;cstdio&gt;
#include &lt;iostream&gt;
using namespace std;

const int maxn = 100001;
const int NIL = -1;

struct Node {
	int p, l, r;
} T[maxn];

int n;


void preOrder(int u) {
	if (u == NIL) return;
	printf(&quot; %d&quot;, u);
	preOrder(T[u].l);
	preOrder(T[u].r);
}

void inOrder(int u) {
	if (u == NIL) return;
	inOrder(T[u].l);
	printf(&quot; %d&quot;, u);
	inOrder(T[u].r);
}

void postOrder(int u) {
	if (u == NIL) return;
	postOrder(T[u].l);
	postOrder(T[u].r);
	printf(&quot; %d&quot;, u);
}


int main() {
	int v, l, r, root;
	while (scanf(&quot;%d&quot;, &amp;n) != EOF) {
		for (int i = 0; i &lt; n; i++) { // 初始化
			T[i].p = NIL;
		}	
		
		for (int i = 0; i &lt; n; i++) {
			scanf(&quot;%d %d %d&quot;, &amp;v, &amp;l, &amp;r);
			T[v].l = l;
			T[v].r = r;
			if (l != NIL) T[l].p = v;
			if (r != NIL) T[r].p = v;
		}
		
		for (int i = 0; i &lt; n; i++) {
			if (T[i].p == NIL) root = i;
		}
		printf(&quot;PreOrder\n&quot;);
		preOrder(root);
		printf(&quot;\n&quot;);
		
		printf(&quot;InOrder\n&quot;);
		inOrder(root);
		printf(&quot;\n&quot;);
		
		printf(&quot;PostOrder\n&quot;);
		postOrder(root);
		printf(&quot;\n&quot;);
	}
	return 0;
}
</code></pre>
<h3 id="算法解析-3">算法解析</h3>
<blockquote>
<p>树的遍历会对每一个结点进行一次访问，故算法复杂度为O(n)。<br>
使用递归算法要注意，一旦树的结点数量庞大且分布不均，会导致递归深度过深。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Recursion & Divide and Conquer]]></title>
        <id>https://lesenelir.github.io/post/recursion-and-divide-and-conquer/</id>
        <link href="https://lesenelir.github.io/post/recursion-and-divide-and-conquer/">
        </link>
        <updated>2020-07-09T04:46:28.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1递归与分治">1.递归与分治</h1>
<h3 id="概述">概述</h3>
<p>分治法：通过求解局部性的小问题来解开原本的问题。<br>
分治步骤：</p>
<ol>
<li>将问题分割成局部问题</li>
<li>递归求解局部问题</li>
<li>将局部问题进行整合，解决原问题</li>
</ol>
<h1 id="2穷举搜索">2.穷举搜索</h1>
<h3 id="概述-2">概述</h3>
<p>对于穷举搜索来说，每一个元素都有选和不选两种选择</p>
<h3 id="线性搜索问题描述"><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_5_A">线性搜索问题描述</a></h3>
<h3 id="代码实现">代码实现</h3>
<pre><code class="language-C++">#include &lt;cstdio&gt;
#include &lt;iostream&gt;
using namespace std;


int n;
int A[50];

int solve(int i , int m) {
	if (m == 0) return 1;
	if (i &gt;- n) return 0;
	int res = solve(i + 1, m) || solve(i + 1, m - A[i]);
	return res;
}


int main() {
	int q, M;
	scanf(&quot;%d&quot;, &amp;n);
	for (int i = 0; i &lt; n; i++) {
		scanf(&quot;%d&quot;, &amp;A[i]);
	}
	scanf(&quot;%d&quot;, &amp;q);
	for (int i = 0; i &lt; q; i++) {
		scanf(&quot;%d&quot;, &amp;M);
		if (solve(0, M) == 1) printf(&quot;YES\n&quot;);
		else printf(&quot;NO\n&quot;);
	}	
	return 0;
}
</code></pre>
<h3 id="算法解析">算法解析</h3>
<p>solve(int i, int m) 表示用第i个元素后面的元素能得到m时返回true。<br>
这样做的好处是，能够把solve(i, m)分解成solve(i+1, m)和solve(i+1, m-A[i])， m-A[i]表示使用了第i个元素。<br>
最后递归的原问题是solve(0, m)。</p>
<blockquote>
<p>递归会多次进行计算solve(i, m)，这样会有很多重复计算，我们通过动态规划可以解决这个问题。</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Search Algorithm]]></title>
        <id>https://lesenelir.github.io/post/search-algorithm/</id>
        <link href="https://lesenelir.github.io/post/search-algorithm/">
        </link>
        <updated>2020-07-08T04:18:26.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1线性搜索">1.线性搜索</h1>
<h3 id="概述">概述</h3>
<p>从数组头开始顺次访问各元素，检查元素是否与目标值相等。</p>
<h3 id="线性搜索问题描述"><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_4_A">线性搜索问题描述</a></h3>
<h3 id="代码实现">代码实现</h3>
<pre><code class="language-C++">#include &lt;cstdio&gt;
#include &lt;iostream&gt;
using namespace std;

const int maxn = 10010;
int S[maxn];
int T[maxn];

bool lineSearch(int S[], int n, int key) {
	bool flag = false;
	for (int i = 0; i &lt; n; i++) {
		if (S[i] == key) {
			flag = true;
			break;
		}
	}
	return flag;
}

int main() {
	int n;
	scanf(&quot;%d&quot;, &amp;n);
	for (int i = 0; i &lt; n; i++) {
		scanf(&quot;%d&quot;, &amp;S[i]);
	}
	int q;
	scanf(&quot;%d&quot;, &amp;q);
	for (int i = 0; i &lt; q; i++) {
		scanf(&quot;%d&quot;, &amp;T[i]);
	}
	int count = 0;
	for (int i = 0; i &lt; q; i++) {
		if (lineSearch(S, n, T[i]) == true) count++;
	}
	printf(&quot;%d\n&quot;, count);
	return 0;
}
</code></pre>
<h3 id="算法解析">算法解析</h3>
<p>ineSearch()函数是查询数组S中是否含有key的值。</p>
<blockquote>
<p>线性搜索一般来说都是用for循环来处理，算法复杂度为O(n)</p>
</blockquote>
<h1 id="2二分搜索">2.二分搜索</h1>
<h3 id="概述-2">概述</h3>
<p>二分搜索首先针对的是有序的序列，其次是检索范围正中央的元素，最后看关键字位于正中央元素的哪侧。</p>
<h3 id="二分搜索问题描述"><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_4_B">二分搜索问题描述</a></h3>
<h3 id="代码实现-2">代码实现</h3>
<pre><code class="language-C++">#include &lt;cstdio&gt;
#include &lt;iostream&gt;
using namespace std;

const int maxn = 100010;
int S[maxn];
int T[maxn];
int n;

int binarySearch(int key) {
	int left = 0;
	int right = n;
	int mid;
	while (left &lt; right) {
		mid = (left + right) / 2;
		if (key == S[mid]) return 1;
		if (key &gt; S[mid]) left = mid + 1;
		else if (key &lt; S[mid]) right = mid;
	}
	return 0;
}

int main() {
	scanf(&quot;%d&quot;, &amp;n);
	for (int i = 0; i &lt; n; i++) {
		scanf(&quot;%d&quot;, &amp;S[i]);
	}
	int q;
	scanf(&quot;%d&quot;, &amp;q);
	for (int i = 0; i &lt; q; i++) {
		scanf(&quot;%d&quot;, &amp;T[i]);
	}
	int count = 0;
	for (int i = 0; i &lt; q; i++) {
		if (binarySearch(T[i]) == 1) count++;
	}
	printf(&quot;%d\n&quot;, count);
	return 0;
}
</code></pre>
<h3 id="算法解析-2">算法解析</h3>
<p>binarySearch()是二分搜索的模版</p>
<blockquote>
<p>对于搜索查找问题，都可以使用二分搜索算法来解决。<br>
但使用二分查找时，需要对数据进行排序，一般来说进行初等排序算法来解决。若要考虑数据体积，则需要用高等排序算法。<br>
二分搜索算法的算法复杂度为O(logn)</p>
</blockquote>
<h1 id="3散列法">3.散列法</h1>
<h3 id="概述-3">概述</h3>
<p>各元素的存储保存在散列表中，元素的存储位置由散列函数决定，只需把元素的关键值代入特定的函数就可以找出对应的位置。</p>
<h3 id="散列法问题描述"><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_4_C">散列法问题描述</a></h3>
<pre><code class="language-C++">#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;iostream&gt;
using namespace std;

#define M 1046527
#define NLL (-1)
#define L 14
#define ll long long int

char H[M][L];

//char 转 int
int getChar(char ch) {
	if (ch == 'A') return 1;
	else if (ch == 'C') return 2;
	else if (ch == 'G') return 3;
	else if (ch == 'T') return 4;
	else return 0;
}

//str 转int 并生成 key
ll getKey(char str[]) {
	ll sum = 0, p = 1,i;
	for(i = 0; i &lt; strlen(str); i++) {
		sum += p * (getChar(str[i]));
		p *= 5;
	}
	return sum;
}

int h1(int key) { return key % M; }
int h2(int key) { return 1 + (key % (M-1));}

int Find(char str[]) {
	ll key,i,h;
	key = getKey(str);
	for (i = 0; ; i++) {
		h = (h1(key) + i * h2(key)) % M;
		if (strcmp(H[h], str) == 0) return 1;
		else if (strlen(H[h]) == 0) return 0;
	}
	return 0;
}

int Insert(char str[]) {
	ll key,i,h;
	key = getKey(str);
	for (i = 0; ; i++) {
		h = (h1(key) + i*h2(key)) % M;
		if (strcmp(H[h], str) == 0) return 1;
		else if (strlen(H[h]) == 0) {
			strcpy(H[h],str);
			return 0;
		}
	}
	return 0;
}

int main() {
	int i,n,h;
	char str[L],com[9];
	for (i = 0; i &lt; M; i++) {
		H[i][0]= '\0';
	}
	scanf(&quot;%d&quot;,&amp;n);
	for (i = 0; i &lt; n; i++) {
		scanf(&quot;%s %s&quot;, com, str);
		if (com[0] == 'i') {
			Insert(str);
		} else {
			if (Find(str)) {
				printf(&quot;yes\n&quot;);
			} else printf(&quot;no\n&quot;);
		}
	}
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Basic Sorting Algorithm]]></title>
        <id>https://lesenelir.github.io/post/basic-sorting-algorithm/</id>
        <link href="https://lesenelir.github.io/post/basic-sorting-algorithm/">
        </link>
        <updated>2020-07-03T09:15:36.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1初等排序">1.初等排序</h1>
<h3 id="概述">概述</h3>
<p>一般来说数据都是一张具有多个属性的表，所谓的排序就是以按照某种特定的属性为基准，这个特定属性就是排序键。</p>
<h3 id="准则">准则</h3>
<ul>
<li>复杂度</li>
<li>稳定性</li>
</ul>
<blockquote>
<p>所谓的稳定性是指：当有多个键值相等时，排序先后顺序按照输入的先后顺序。</p>
</blockquote>
<h1 id="2插入排序">2.插入排序</h1>
<h3 id="插入排序问题描述"><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_1_A">插入排序问题描述</a></h3>
<h3 id="代码实现">代码实现</h3>
<pre><code class="language-C++">#include &lt;cstdio&gt;
#include &lt;iostream&gt;
using namespace std;

const int maxn = 10010;
int A[maxn];

void trace(int A[], int n) {
	for (int i = 0; i &lt; n; i++) {
		if (i &gt; 0) printf(&quot; &quot;);
		printf(&quot;%d&quot;, A[i]);
	}
	printf(&quot;\n&quot;);
}

void insertionSort(int A[], int n) {
	for (int i = 1; i &lt; n; i++) {
		int temp = A[i];
		int j = i - 1; // j从i往前枚举
		while (j &gt;= 0 &amp;&amp; A[j] &gt; temp) {
			A[j+1] = A[j];
			j--;
		}
		A[j+1] = temp;
		trace(A, n);
	}
}

int main() {
	int n;
	while (scanf(&quot;%d&quot;, &amp;n) != EOF) {
		for (int i = 0; i &lt; n; i++) {
			scanf(&quot;%d&quot;, &amp;A[i]);
		}	
		trace(A, n);
		insertionSort(A, n);
	}
	
	return 0;
}

</code></pre>
<h3 id="算法解析">算法解析</h3>
<p>外层循环i从1开始自增，每次循环的A[i]值保存在变量temp中。<br>
内存循环j从前往后枚举，找到比temp大的元素并依次后移，循环结束将temp插入j+1位置。</p>
<blockquote>
<p>插入排序不相邻的元素不会直接交换位置，所以插入排序是稳定排序。<br>
插入排序的算法复杂度是O(n^2).<br>
插入排序适用于相对有序的数据</p>
</blockquote>
<h1 id="3冒泡排序">3.冒泡排序</h1>
<h3 id="冒泡排序问题描述"><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_2_A">冒泡排序问题描述</a></h3>
<h3 id="代码实现-2">代码实现</h3>
<pre><code class="language-C++">#include &lt;cstdio&gt;
#include &lt;iostream&gt;
using namespace std;

const int maxn = 10010;
int A[maxn];

int bubbleSort(int A[], int n) {
	int count = 0;
	bool flag = true;
	for (int i = 0; flag; i++) {
		flag = false;
		for (int j = n-1; j &gt;= i+1; j--) {
			if (A[j] &lt; A[j-1]) {
				swap(A[j], A[j-1]);
				flag = true;
				count++;
			}
		}
	}
	return count;
}


int main() {
	int n;
	while (scanf(&quot;%d&quot;, &amp;n) != EOF) {
		for (int i = 0; i &lt; n; i++) {
			scanf(&quot;%d&quot;, &amp;A[i]);
		}	
		int res = bubbleSort(A, n);
		for (int i = 0; i &lt; n; i++) {
			if (i &gt; 0) printf(&quot; &quot;);
			printf(&quot;%d&quot;, A[i]);
		}
		printf(&quot;\n&quot;);
		printf(&quot;%d\n&quot;, res);
	}
	return 0;
}
</code></pre>
<h3 id="算法解析-2">算法解析</h3>
<p>外层循环i表示未排序的开头元素，从开头向末尾移动。<br>
内存循环j表示相邻元素之间两两比较。</p>
<blockquote>
<p>冒泡排序是稳定的排序算法，但如果把条件判断改为A[j] &lt;= A[j-1]，则此时是不稳定算法。<br>
冒泡排序的算法复杂度是O(n^2).<br>
冒泡排序当中的交换次数又称为反序数或逆序数（线性代数），体现的是数组的错乱程度。</p>
</blockquote>
<h1 id="4选择排序">4.选择排序</h1>
<h3 id="选择排序问题描述"><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_2_B">选择排序问题描述</a></h3>
<h3 id="代码实现-3">代码实现</h3>
<pre><code class="language-C++">#include &lt;cstdio&gt;
#include &lt;iostream&gt;
using namespace std;

const int maxn = 10010;
int A[maxn];

int selectSort(int A[], int n) {
	int count = 0;
	int temp;
	for (int i = 0; i &lt; n-1; i++) {
		int k = i;
		for (int j = i; j &lt; n; j++) {
			if (A[j] &lt; A[k]) {
				k = j;
			}
		}
		temp = A[i];
		A[i] = A[k];
		A[k] = temp;
		if (i != k) count++;
	}
	return count;
}



int main() {
	int n;
	while (scanf(&quot;%d&quot;, &amp;n) != EOF) {
		for (int i = 0; i &lt; n; i++) {
			scanf(&quot;%d&quot;, &amp;A[i]);
		}	
		int res = selectSort(A, n);
		for (int i = 0; i &lt; n; i++) {
			if (i &gt; 0) printf(&quot; &quot;);
			printf(&quot;%d&quot;, A[i]);
		}
		printf(&quot;\n&quot;);
		printf(&quot;%d\n&quot;, res);
		
	}
	return 0;
}
</code></pre>
<h3 id="算法解析-3">算法解析</h3>
<p>外层循环i遍历数组。<br>
内层循环j遍历从i开始的未排好序的序列，从这个序列中找出最小值，并交换元素。</p>
<blockquote>
<p>冒泡排序从局部入手减少逆序数，选择排序放眼大局逐个选择最小值。</p>
</blockquote>
]]></content>
    </entry>
</feed>